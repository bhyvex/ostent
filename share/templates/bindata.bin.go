// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\xeb\x72\xdb\x36\xd6\xff\xf3\x14\x28\xbf\xe6\x9b\xb6\x5b\x92\x96\x63\xef\x66\x52\x8a\x3b\x89\xed\x6d\x35\x1b\xdb\x9a\xd8\xce\x6e\x87\xcb\xc9\x40\xe4\xa1\x84\x84\x24\x58\x00\x94\xed\x3e\xfd\x0e\x08\x5e\x25\xca\xba\x51\x8c\x77\x26\xf9\x11\x4b\x00\xce\x1d\x38\x37\x50\x74\x1c\x1f\x02\x12\x03\xd2\xd4\xdf\x4f\x69\x22\x48\x04\x9a\xeb\x5a\x3c\xc1\xb1\xed\x38\xc6\x39\x16\xd8\xe0\x8f\x5c\x40\xf4\x89\x72\x01\xb1\x30\xd4\xa2\x4f\x01\x65\x11\x16\xae\x6b\x99\xf9\x5a\x88\x7d\xd7\x5d\x42\x39\xa3\x5c\xc4\x58\x21\xc5\x68\xc6\x20\x18\x6a\xa6\x86\x04\x11\x21\x0c\xb5\x62\x16\xb5\x93\x2a\xa6\x3f\xf1\x19\x65\xc2\x75\xb5\x15\x2c\x2d\xae\xb3\x4c\xbc\x92\xa1\x10\x6b\xae\xfb\xc2\xf2\xc9\x1c\x79\x21\xe6\x7c\xa8\x31\x7a\x8f\xe0\x21\xc1\xb1\x0f\x3e\x9a\x31\x7d\x42\x85\xa0\x91\x66\xbf\x40\xa8\xbe\xcc\xa3\x61\x1a\xc5\x88\x47\x38\x0c\xf5\x01\x12\xf0\x20\x74\x46\xa6\x33\xa1\xd9\xf5\x65\x8e\x43\x02\xa4\x98\x4c\x30\xc3\x11\x37\xde\xe3\xd8\xb8\x82\x29\x16\x64\x0e\xae\xcb\x67\xf4\x5e\x97\xff\xcd\x88\x0f\x8e\x03\x21\x07\xd7\x95\x9f\xeb\x83\x92\xf3\x8c\x01\x84\xac\xd9\xa0\x40\x3d\x3b\x55\x54\xe9\x1c\x58\x10\xd2\x7b\xcd\xb6\x70\xa1\xc9\xf7\x14\xfb\x08\xcf\xa7\xc8\x27\x3c\x09\xf1\x23\xa2\x89\x20\x34\xe6\x9a\xd2\x79\xa1\xb7\x9c\xa5\xdb\x90\xc4\x5f\x32\xce\x5c\xd7\xce\x8c\x5d\xd0\x28\x98\xd0\xe5\x7f\xe8\x7e\x46\x04\xf0\x04\x7b\xa0\x27\x0c\x50\x10\x52\x2c\xf4\x10\x02\xa1\xd9\x86\x61\xa0\xdc\xf6\x05\x6d\xa9\x76\xc5\xb3\x39\x1b\xd8\x96\xe9\x93\x79\xa6\xc4\xf2\xc3\xb2\x36\x43\xcc\xa6\xa0\x0f\x06\x07\xd6\x61\x1a\xd6\x8d\x1d\x41\x9c\xa2\x52\x50\xf9\x21\x5f\x87\x90\x15\x92\xe2\x63\x93\x5f\x12\x27\xa9\xd0\xa7\x8c\xa6\x89\x56\xad\x58\xb9\x46\x0f\xf1\x04\x42\x65\xae\x98\xde\x33\x9c\x68\x36\xa3\xf7\xbc\xd4\xc5\x3a\xf8\x49\x2a\x04\x8d\x1b\xa4\x10\xb2\xd4\x68\xb1\x3e\xff\x96\xed\x48\xc4\xc1\xa3\xb1\x8f\xd9\xa3\xdc\x01\x78\x12\x82\x5f\x9d\x96\x9a\x12\xdf\x4e\x38\x0d\x53\x01\xf2\x90\x28\xf8\x06\x37\xdb\xb2\x57\x70\xd4\xb6\xc9\xae\xca\x4d\x66\xbc\x07\xce\x8d\xdf\x18\x04\xae\xdb\x10\xa8\xf8\x97\x53\xa8\xa9\x0b\x35\x84\x5b\x83\xf9\xe2\x41\x30\x7c\x26\x71\xb8\xae\xd6\x20\x60\xeb\xeb\x60\x6f\xe1\x41\xf4\xab\x8c\x4b\xca\xe0\x30\xca\xc8\x30\x3f\xa1\x8c\x35\x90\x4a\x15\xe8\x2f\x1b\x28\xa3\xf1\xd5\x32\x8b\x53\x63\x99\x69\xb8\x7c\x92\xe1\x8f\xe5\xc3\x5c\xec\x43\x74\xa4\x4e\xee\xc2\x81\xad\xa1\xe0\x82\x91\x04\xaa\x13\xba\xe0\xb9\xc5\x0c\xb0\xaf\x35\x9d\x98\xf2\xe6\xc8\xa3\x61\xe1\xae\x35\x7b\x0c\x8c\x50\x3f\xf7\x58\x6b\x56\x37\x9c\x3b\xfa\x88\xc3\x14\x9e\x06\xd4\xec\x62\x3e\xd3\x4b\xcd\x7f\x85\x58\xc6\x20\x86\xe3\x29\xa0\xef\x43\x8c\xde\x0c\xcb\x09\xe3\x3d\xe1\x72\xeb\x35\x05\xda\x40\x94\x56\x07\x55\xb1\x8c\xee\x89\x2f\x66\xfa\x2b\x06\x91\x74\x01\xdf\x87\xd8\x50\xc2\xbb\x6e\xa4\xf8\xdb\x45\x0b\x0a\x51\xa6\x8b\x32\xe8\xaf\x40\xa0\x87\x6c\x49\x21\x79\x30\xce\xfe\xbc\xa8\x76\x50\xfd\xff\x2a\x54\x2c\x00\x2d\x44\xf0\x08\xa2\xbe\x43\xf8\x25\x44\x3d\xc4\xf0\x4b\x88\xa8\xf2\xdf\x1b\x47\x70\xc9\x58\x17\x21\x5c\x91\x3e\x60\x00\xdf\x57\x83\xdf\x22\x78\xa9\xc5\xfe\x43\x78\x46\xf6\x30\x31\xbc\x42\xbd\x43\x10\xaf\x80\xfb\x8d\xe2\x19\xdd\xc3\x84\xf1\x0a\xf5\xd6\x71\xbc\x02\xed\x2b\x90\x37\xb6\x63\x6f\x91\xbc\xf0\x55\xdb\xc7\xb0\x5b\x2a\x70\xb8\x0b\xe0\x1d\x87\x9d\x52\x87\x7f\x30\x58\x93\x39\xac\xa4\xf7\x72\xd7\x8c\x23\x82\xa8\x96\x72\x44\x10\x55\x39\x47\x04\xd1\xce\x49\x87\xe3\x48\x5c\xc6\x3f\x89\x34\xee\x8e\x09\x84\x44\x90\xd9\x60\x2f\x0c\xd2\x18\x7b\x21\x90\x56\xd9\x01\x01\x9a\x4c\xf5\x94\x43\xe2\x09\x0d\xf9\x58\xe0\xfc\xcb\xb0\x62\x6b\xec\x09\xd7\xad\xf3\x99\x0d\xac\xb1\xe4\x81\xb3\x25\x3f\xe8\x3b\x59\x3a\x0f\x7a\xc8\x95\xce\x09\xff\x82\x52\x8e\xa7\xb0\x55\xbe\x74\x1e\x74\x92\x2e\x55\xd4\x0f\x98\x32\xed\xa9\xc7\x6f\x19\x53\xa1\xc4\xfe\x13\x26\x49\xf5\x30\xf9\x52\x89\x79\x87\x74\xa9\x84\xed\x37\x5b\x92\x64\x0f\x93\x2c\x95\x98\xb7\xce\x95\x4a\xc8\xbe\x52\xa5\xfa\x3e\xec\x2a\x53\x72\x1c\xf3\x27\x94\xd0\x2f\x80\x92\x94\x91\xe0\xd1\xe3\xfc\x4d\x63\xad\xcf\x68\x22\xcf\x6e\xc3\x09\x61\x06\x42\x43\x66\xee\xab\xd0\x4f\x66\xde\xee\x5f\x17\x03\x8b\x23\xed\x38\xf7\x44\xcc\x10\x89\x7d\x78\x68\xca\xf8\xb1\xd0\xed\x17\x29\x61\x5d\x91\xb8\xdc\x1f\xef\x49\xfc\x45\xed\x83\x9c\x5e\x3e\x96\x1b\xaf\x69\xbb\x73\x98\x13\x0f\xea\xdc\x39\x8e\x71\x26\x05\xc8\x97\x57\x71\xb3\x6c\xf8\x6f\x13\xd6\xb7\x12\x69\xd0\x89\x48\x97\x34\x8d\x05\xf8\x87\x96\xa9\x11\xae\x37\x12\xef\xb4\x13\xf1\x54\x86\xfd\xec\x84\x3b\xe9\x44\xb8\xac\x0a\x78\x76\xb2\x1d\x77\x22\xdb\xdb\x39\x26\xcf\xd0\x70\xaf\xba\x32\xdc\xcb\x2e\x65\x5b\x5d\x7c\xf9\x41\xad\xf6\xf2\x83\xaa\xf4\xf2\x83\x1d\x2b\xaf\xc5\x14\xd8\x71\xbe\xf7\x03\xe3\x1c\xe6\x57\x38\xda\xb2\x8a\xa9\x90\xa0\x1c\x0b\x61\xbb\x63\xa9\x57\x46\x53\x86\x1f\x17\x24\x51\x99\x73\xad\xf2\xf2\x83\xd6\xda\x2f\xcf\xe7\x47\x31\xf5\x81\x23\x21\x57\x94\xeb\xd5\x60\x05\xd0\x0f\x97\x2d\xf5\x65\x93\xc9\x94\xcb\x44\xb3\xe0\x31\x6d\x2c\xef\x87\xc5\xec\xb4\x3e\xc9\x63\xc0\x00\x2a\x1e\x83\x46\xc5\xdb\x01\x8f\x4f\xd4\xc2\x4a\x83\xaa\x14\xde\x44\xd7\x2d\x35\xf2\x92\xba\x5f\x36\xd4\xdd\x84\xf8\x9a\xc5\xb5\x97\xa4\x7d\x57\xd7\x67\xe3\xbb\x1e\xca\xeb\xb3\xf1\xdd\x56\x75\xb5\xe4\xaa\x8b\xc2\xfa\x6c\x7c\x77\xc0\x8a\x7a\x5f\xdd\x7d\x2b\xa9\x4b\x2d\xf6\x5f\x53\x67\x64\x0f\x53\x54\x57\xa8\x77\xa8\xaa\x2b\xe0\x7e\xcb\xea\x8c\xee\x61\xea\xea\x0a\xf5\xd6\x85\x75\x05\xda\x57\x65\xdd\xd8\x8e\xbd\x5d\x42\x9c\x51\xb6\x6b\x67\x9f\xad\x69\x08\xb7\x03\xde\x3c\xf2\x9d\xe0\xfe\x85\x89\xd8\x09\x70\xe4\x87\xbb\x5f\x42\x78\x49\x5a\x4b\x84\xbd\x24\xad\x32\x61\x2f\x49\xf7\x4a\x85\xab\xa2\x5d\xe2\x35\xae\xca\xbc\xa6\xb0\xe8\x2e\x0d\xfd\x62\x2b\x2e\xe4\x32\x92\x80\xb4\x58\xd5\xd8\x6f\x8c\xbc\x3c\x2c\xe5\x9b\x47\xde\x24\x5c\x0c\x1c\x98\xae\xdc\x32\x4d\xc2\xe5\x48\x07\x94\x75\x12\xcf\x81\x71\x78\x8a\x03\xb9\xf7\x9a\x1c\x94\x23\x5f\xf7\x36\x85\xf4\x7e\x9b\x32\xea\xe3\x36\x65\x14\x0b\x60\x01\xf6\x80\x6f\x95\xf5\x8d\xba\xb9\x4d\xa9\xa8\x1f\x30\xf7\xdb\x53\x8f\xdf\x52\xbf\x42\x89\xfd\x67\x7e\xa3\x83\xdd\xa6\x8c\xf6\xb8\x4d\x19\x7d\x9d\xdb\x94\xd1\xc1\x6e\x53\x46\x3b\xdf\xa6\x8c\xfa\xbe\x4d\x19\x1d\xe0\x36\x65\x6d\xca\x57\xba\xa9\x9d\xb2\xa9\xf1\x46\x50\xc7\xf5\x90\x59\x3f\xfb\xe5\xbd\x37\xa3\x09\xff\xf9\x82\x31\xca\x38\x1a\xc5\xe6\x75\x2a\x50\x02\x2c\x3f\xbc\x9a\x8d\xde\x53\xce\xd1\xe8\x1a\x25\xbc\x1b\x82\x63\xec\x7d\x01\xd1\x4e\xab\x9c\xeb\x8e\xdc\x3b\xb2\x82\xd6\xe8\x1a\x59\xc4\x9e\x58\x26\xb1\xd7\xd1\x5a\x9d\x96\xc6\x20\x08\xad\x25\xa6\xa4\xd6\xa1\xcd\xe6\xba\x6b\xd2\x92\xc0\xe8\xa4\xb7\x5a\x20\x1b\x8d\x37\x44\xb5\x52\xc5\xf6\xff\xc7\x13\x9e\xfc\xd2\x80\xce\xfa\x8d\x85\xee\xb3\xf6\x2c\xf2\xb3\x1d\x06\x6a\x87\x45\xd4\x4f\x43\x8a\x4e\x7e\xd5\x9a\xad\xb9\xda\x52\x34\x8a\xeb\xcb\x14\xb7\xd9\x36\x1d\xc5\x25\xcb\xe6\x4a\x68\x69\xe8\x76\xf0\xeb\xb4\xfa\x79\xd1\xcf\x2d\xf0\x50\x1c\x82\x65\x78\x75\x3e\xd6\xd0\xcf\xe1\x5b\x19\x50\x08\xea\x1c\xe4\x7f\x5a\x74\x98\xed\x2f\x69\x83\x1f\xe0\x0f\x94\x71\x0f\xa1\xc0\xb9\x06\x90\x76\xa4\xfd\xd8\x32\x23\xa9\x2e\x4f\x15\x7c\xaf\x9c\x2a\xc0\x5c\x57\x5a\xae\x74\x79\x0d\xe9\xce\x0b\xab\xd4\xcf\x4f\xae\xd7\x1a\x67\x2b\x74\x73\x5e\x5a\xe5\x29\xf0\xd5\xb6\x29\x5d\xd3\x2a\xf8\x35\xb6\xb9\xa8\xac\xf2\x24\x82\x16\xdb\x1c\xe8\x78\xb4\xed\xfc\xa4\xf4\x8a\xcb\x7b\x27\xf7\x8a\x6b\x76\x5f\x81\xa1\x75\xfb\xe5\x28\xd6\xec\xbf\x25\x0f\xbd\x4a\x63\xeb\x38\x1a\xd7\x78\x79\x1a\x45\x9b\xd6\x7b\x50\xf7\xbb\xdf\x6f\x2f\x6e\x5a\x95\xfd\xee\x51\xc0\x3a\x55\x2b\xe8\x56\x45\x67\xe0\x9b\xa9\xf9\xdd\xe8\xf6\xe6\x09\x1d\xcb\xc0\xb5\x92\x8f\x0c\xf6\x09\xed\x4a\xe0\xcd\x55\x7b\xe0\x1a\x37\xe1\x7d\xd7\xb8\x63\xde\x43\x8d\x3b\x66\xd4\x03\xce\xb7\x2c\x71\xc7\xbc\x93\x12\xb7\x24\x7e\xc0\x0a\x77\x4f\x2d\x7e\xab\x70\x0b\x25\xf6\x5f\xe1\x4a\xaa\x87\xa9\x70\x4b\xcc\x3b\x54\xb8\x25\x6c\xbf\x15\xae\x24\x7b\x98\x0a\xb7\xc4\xbc\x75\x85\x5b\x42\xf6\x55\xe1\xd6\xf7\xe1\xff\xf2\xf3\x82\xdb\x3d\xf2\x33\xe6\x5d\x3d\x3a\x38\x1e\x9d\x3f\xaf\xa7\x99\xa4\x68\xdd\x3c\x42\x78\x77\x78\xd1\x36\x94\xa7\x9b\x47\xcf\xee\x6e\x2e\x3e\x3c\x3f\x5b\x75\xf3\xe4\xd9\xf8\x19\x4a\xd6\xcd\xc3\x90\x57\xa3\xe7\x27\x59\x37\xcf\xb0\x7e\x1c\x7d\xb8\x7d\x7e\xb2\xfd\xb5\x13\xd9\x3e\x5c\xdc\xf4\x23\x9a\x07\xb1\x00\xb6\xa1\x6c\x7f\xeb\xe6\xd9\xe3\xd1\xe5\xc5\x33\x71\x8c\xaf\x3b\x11\xe8\xec\xfa\xf2\xf2\xed\xd5\x8e\xce\x7e\xb1\xf5\x99\x30\xea\xf1\x5a\xeb\x33\xe1\x55\xeb\x33\x9b\xdb\xab\xf5\x59\xb5\x2a\x13\x6e\x8c\x47\xe7\x3b\xff\x3e\x2f\xe1\xc6\xdd\xe6\xe0\x15\x0c\x07\xb6\x0f\xcd\x31\x23\x94\x11\xf1\xb8\x0f\x8e\x2b\xe2\xed\xf2\xb3\xc2\x12\xfe\x86\xfc\xb9\x17\xfc\x07\xe0\xc4\x87\x58\x6c\x87\xa3\x38\xa8\x39\x92\x5b\xb2\xbe\x67\x5d\x49\xdc\x68\x70\xef\xdd\x89\xb0\xbe\x3b\xbf\x3e\xbb\xfd\x7d\x7c\x81\x66\x22\x0a\xed\x17\x96\xfa\x23\x2b\x7c\xc0\x7e\x9e\xf5\x46\x20\x30\xf2\x66\x98\x71\x10\x43\x2d\x15\x81\xfe\xba\x48\x88\xb3\x42\x7f\xc3\x57\x44\x21\x35\x6e\x99\x0a\xa8\x86\x7b\x26\x44\xa2\xc3\x1f\x29\x99\x0f\xb5\x7f\xeb\x77\x6f\xf5\x33\x1a\x25\x58\x90\x49\x08\x1a\xf2\x68\x2c\xc1\x86\xda\xe8\x62\x08\xfe\xb4\x48\xb9\x15\xa4\xc4\x3f\xd4\xe6\x04\xee\x13\xca\x44\x6d\x71\xf6\x42\x8e\xa1\x9f\xfd\x9a\x45\xcf\xbe\xfc\x8c\x48\x4c\x04\xc1\xa1\xce\x3d\x1c\xc2\x70\x60\x1c\x69\xb6\xf5\x9d\xae\xcb\x03\x3b\xba\x70\x73\xb4\xd2\xa3\x20\x06\x61\xd6\x74\x60\xc2\x4b\x05\x22\x1e\x8d\xb5\xe2\x45\x5a\x01\x9e\xcb\xef\x06\xf1\xa8\x04\x97\x6a\x24\x81\xab\xeb\x4b\xe0\x0a\x8a\x93\x3f\x81\x0f\xb5\x57\xc7\x0f\xaf\x8e\x4b\x1c\x8e\x63\x5c\x67\xba\xf8\x08\x8c\x13\x1a\xbb\x6e\x81\x96\x17\x1f\xf4\x57\xc7\x46\x12\x4f\x35\x24\x1e\x13\x18\x6a\x24\xc2\x53\x30\xe5\xc0\x12\x1d\x9c\x24\x21\xe8\x82\xa6\xde\x4c\x6f\xd0\x1c\x1c\x1f\x3d\x0c\x8e\x8f\xb6\xa2\x3a\x38\x3e\x32\xb6\xa4\x72\x72\xf2\x30\x38\x39\xd9\x8e\xca\xc9\xc9\xb6\x54\x4e\x8f\x1f\x06\xa7\xdb\x69\x70\x70\x7a\xbc\x2d\x95\xd7\x47\x0f\x83\xd7\x5b\x6a\xec\xf5\x0a\x8d\x71\xf1\x18\x02\x9f\x81\x2c\xe5\x94\x11\xe5\xe1\x37\x3d\xce\x9f\xc2\xef\x71\x6e\x66\x81\xce\x90\x0b\xd5\xb1\x2d\x8e\xa2\x35\xa1\xfe\xe3\x72\x25\x2a\x68\xa2\x4f\x30\x6b\x2d\x45\xf3\x39\x3d\x3b\x72\xf5\xd7\xd8\xcc\x8e\x6b\x0d\xbc\x08\xb3\x29\x89\xf3\x1e\xa3\x7e\xb4\x10\x80\xd2\xc4\xc7\x02\x78\xfe\xd4\xb9\xea\x58\x0e\x97\x5e\x36\x67\x3b\x8e\x80\x28\x09\xb1\x68\x79\x13\x1d\x32\x4a\x9f\x55\x86\x66\x4d\x9e\x7a\xfe\xc6\x34\xef\xef\xef\x0d\xca\x05\xa3\x5c\x18\x1e\x8d\x4c\xe5\x26\x4c\x06\x21\x60\x0e\xdc\x94\x28\xb9\xf8\xbb\x17\x25\xc3\x65\x85\x69\x76\xe1\x55\xb0\x6d\x99\xb3\xe3\xaa\xf8\xaf\x82\xb1\x02\xb9\x4b\xa6\x0c\xfb\x50\x46\xfc\x36\x35\xa9\x26\x62\xd7\x1c\x96\x63\x25\x0b\x8a\xdb\x9a\x1f\xae\xf1\xd4\xde\xe8\x2b\x38\xcc\xe3\x4f\x3d\xd5\x59\x67\x4a\x19\x7a\x32\x17\x4d\xb8\x60\x64\xe2\xba\x28\x4d\x50\x9b\x85\x17\x1a\xab\xed\x06\xcf\x5f\x58\xd8\x66\xee\x7c\xaa\x66\x6c\xcb\x54\xd4\xeb\x96\x59\xea\xd2\x94\x5f\xea\x1f\x6b\xa2\x3f\xb9\xff\x42\x9c\x85\xc6\x25\x5e\x42\xac\x21\xc5\xc8\xf6\x38\x23\xf5\x16\xa7\x25\x9c\x72\x7c\x57\x9c\x7e\xd0\xce\xa7\x1f\xec\xce\xa7\x97\xa4\xad\x7c\xca\xf1\x5d\x71\x92\x15\x7c\x92\x3d\xf8\x4c\x78\x3b\xce\x84\xd7\x71\x66\x67\x35\x06\xf4\x43\x08\x31\x32\x2e\x1e\x64\x40\x27\xf1\xf4\xc7\xb2\x3b\xb5\xe1\xf5\xc8\xe2\xd2\x85\x96\x7e\x9e\x8a\xd1\x20\xe0\x20\x9a\xaf\xf6\x9a\x9d\xda\x25\x59\xcb\x9c\x9d\xb6\x9f\xc4\x85\xc6\x5f\x1b\x67\xaa\xf9\x87\xb2\x08\x30\xd4\x02\x1a\x0b\xfd\x1e\xe4\xc1\x7d\x83\x48\x3c\x03\x46\xc4\x2f\xed\x49\x7e\x9e\x26\x1e\x97\xc7\x76\xa9\x13\x6b\x25\x0c\x6c\x87\xa6\x22\x49\x05\x77\x1d\x47\xfb\x4f\xac\xb9\xae\x45\x6c\x39\xf9\x7f\xa8\x98\x31\x94\x8b\x72\x51\x4c\x05\xf2\xd4\x0f\x60\x51\x4c\x59\x76\xbf\x10\x1b\xe8\x2c\x1f\xb2\x26\xb6\xe3\x34\x15\x2e\x13\xb5\x0c\x49\x61\x90\xc1\x92\x49\x5c\x97\x97\xa5\xcf\xc4\x7e\x63\x99\xc4\xb6\x4c\xc9\x58\x75\xde\x1b\xf9\x69\x5e\xff\xc0\x43\x42\xb3\x0a\xa8\x46\x6b\xb5\x16\xf7\xd2\x50\x26\x57\x46\xd0\xf8\x0d\xb0\xaf\x2a\x95\x6a\xac\xe8\xae\x3f\xc1\x73\xdd\x2d\xaf\x73\x59\x8d\xd4\x9b\x7b\x8c\x24\xa2\x1e\xf2\x3f\xe3\x39\x56\xa3\x9a\x3d\xc7\x0c\xc9\x5c\x19\x0d\x8b\x86\xb9\xeb\xfe\x62\x99\x6a\xda\xde\x00\xc3\x62\x22\x8e\x38\xf3\xda\x53\x89\xcf\xdc\x54\xf1\xef\xf6\xed\xaf\xbf\x5e\x9c\x4f\x48\xec\xba\x11\x89\xcd\x49\x1a\xfb\x21\x18\x11\x89\x8d\xcf\xbc\xb8\xa6\xe2\xcc\x2b\x26\x3e\xf3\xea\x21\x87\x1a\x63\x96\xa9\xd2\x0f\xcb\xcc\x6a\x84\xff\x06\x00\x00\xff\xff\x6b\x74\xf8\x2b\xca\x56\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 22218, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

