* package procstat_ostent

#+BEGIN_SRC sh :results code
fst=../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat
snd=../procstat_ostent

diff --unified --ignore-all-space --recursive \
"$fst" \
"$snd" |
awk '{ if ($1 == "---" || $1 == "+++") { $_ = $1 FS $2; }; print }'
#+END_SRC

#+RESULTS:
#+BEGIN_SRC diff
Only in ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat: README.md
Only in ../procstat_ostent: README.org
diff --unified --ignore-all-space --recursive ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat/pgrep.go ../procstat_ostent/pgrep.go
--- ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat/pgrep.go
+++ ../procstat_ostent/pgrep.go
@@ -1,4 +1,4 @@
-package procstat
+package procstat_ostent
 
 import (
 	"fmt"
@@ -6,6 +6,8 @@
 	"os/exec"
 	"strconv"
 	"strings"
+
+	"github.com/shirou/gopsutil/process"
 )
 
 type PIDFinder interface {
@@ -13,6 +15,7 @@
 	Pattern(pattern string) ([]PID, error)
 	Uid(user string) ([]PID, error)
 	FullPattern(path string) ([]PID, error)
+	All() ([]PID, error)
 }
 
 // Implemention of PIDGatherer that execs pgrep to find processes
@@ -89,3 +92,15 @@
 	}
 	return pids, nil
 }
+
+func (pg *Pgrep) All() ([]PID, error) {
+	pids, err := process.Pids()
+	if err != nil {
+		return nil, err
+	}
+	all := make([]PID, len(pids))
+	for i, p := range pids {
+		all[i] = PID(p)
+	}
+	return all, nil
+}
diff --unified --ignore-all-space --recursive ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat/process.go ../procstat_ostent/process.go
--- ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat/process.go
+++ ../procstat_ostent/process.go
@@ -1,4 +1,4 @@
-package procstat
+package procstat_ostent
 
 import (
 	"fmt"
@@ -12,14 +12,20 @@
 	PID() PID
 	Tags() map[string]string
 
-	IOCounters() (*process.IOCountersStat, error)
+	// IOCounters() (*process.IOCountersStat, error)
 	MemoryInfo() (*process.MemoryInfoStat, error)
 	Name() (string, error)
+	/*
 	NumCtxSwitches() (*process.NumCtxSwitchesStat, error)
 	NumFDs() (int32, error)
 	NumThreads() (int32, error)
 	Percent(interval time.Duration) (float64, error)
+	*/
 	Times() (*cpu.TimesStat, error)
+
+	Nice() (int32, error)
+	Prio() (int32, error)
+	Uids() ([]int32, error)
 }
 
 type Proc struct {
@@ -28,7 +34,7 @@
 	,*process.Process
 }
 
-func NewProc(pid PID) (Process, error) {
+func psutilNewProc(pid PID) (Process, error) {
 	process, err := process.NewProcess(int32(pid))
 	if err != nil {
 		return nil, err
@@ -58,3 +64,5 @@
 	}
 	return cpu_perc, err
 }
+
+func (p *Proc) Prio() (int32, error) { return 0, nil }
Only in ../procstat_ostent: process_gopsutil.go
Only in ../procstat_ostent: process_gosigar.go
diff --unified --ignore-all-space --recursive ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat/procstat.go ../procstat_ostent/procstat.go
--- ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat/procstat.go
+++ ../procstat_ostent/procstat.go
@@ -1,9 +1,8 @@
-package procstat
+package procstat_ostent
 
 import (
 	"fmt"
 	"strconv"
-	"time"
 
 	"github.com/influxdata/telegraf"
 	"github.com/influxdata/telegraf/plugins/inputs"
@@ -84,7 +83,7 @@
 }
 
 // Add metrics a single Process
-func (p *Procstat) addMetrics(proc Process, acc telegraf.Accumulator) {
+func (p *Procstat) addMetrics(proc Process, acc telegraf.Accumulator) error {
 	var prefix string
 	if p.Prefix != "" {
 		prefix = p.Prefix + "_"
@@ -105,6 +104,25 @@
 		fields["pid"] = int32(proc.PID())
 	}
 
+	uids, err := proc.Uids()
+	if err != nil {
+		return err
+	}
+	fields[prefix+"uid"] = uids[0]
+	//
+	nice, err := proc.Nice()
+	if err != nil {
+		return err
+	}
+	fields[prefix+"nice"] = nice
+	//
+	prio, err := proc.Prio()
+	if err != nil {
+		return err
+	}
+	fields[prefix+"prio"] = prio
+
+	/*
 	numThreads, err := proc.NumThreads()
 	if err == nil {
 		fields[prefix+"num_threads"] = numThreads
@@ -128,11 +146,13 @@
 		fields[prefix+"read_bytes"] = io.ReadBytes
 		fields[prefix+"write_bytes"] = io.WriteBytes
 	}
+	*/
 
 	cpu_time, err := proc.Times()
 	if err == nil {
 		fields[prefix+"cpu_time_user"] = cpu_time.User
 		fields[prefix+"cpu_time_system"] = cpu_time.System
+		/*
 		fields[prefix+"cpu_time_idle"] = cpu_time.Idle
 		fields[prefix+"cpu_time_nice"] = cpu_time.Nice
 		fields[prefix+"cpu_time_iowait"] = cpu_time.Iowait
@@ -142,21 +162,31 @@
 		fields[prefix+"cpu_time_stolen"] = cpu_time.Stolen
 		fields[prefix+"cpu_time_guest"] = cpu_time.Guest
 		fields[prefix+"cpu_time_guest_nice"] = cpu_time.GuestNice
+		*/
+	} else {
+		return err
 	}
 
+	/*
 	cpu_perc, err := proc.Percent(time.Duration(0))
 	if err == nil {
 		fields[prefix+"cpu_usage"] = cpu_perc
 	}
+	*/
 
 	mem, err := proc.MemoryInfo()
 	if err == nil {
 		fields[prefix+"memory_rss"] = mem.RSS
 		fields[prefix+"memory_vms"] = mem.VMS
+		if false {
 		fields[prefix+"memory_swap"] = mem.Swap
 	}
+	} else {
+		return err
+	}
 
-	acc.AddFields("procstat", fields, proc.Tags())
+	acc.AddFields("procstat_ostent", fields, proc.Tags())
+	return nil
 }
 
 // Update monitored Processes
@@ -232,6 +262,9 @@
 	} else if p.User != "" {
 		pids, err = f.Uid(p.User)
 		tags = map[string]string{"user": p.User}
+	} else if true {
+		pids, err = f.All()
+		tags = map[string]string{} // non-nil map
 	} else {
 		err = fmt.Errorf("Either exe, pid_file, user, or pattern has to be specified")
 	}
@@ -240,7 +273,7 @@
 }
 
 func init() {
-	inputs.Add("procstat", func() telegraf.Input {
+	inputs.Add("procstat_ostent", func() telegraf.Input {
 		return &Procstat{}
 	})
 }
Only in ../vendor/github.com/influxdata/telegraf/plugins/inputs/procstat: procstat_test.go
#+END_SRC
